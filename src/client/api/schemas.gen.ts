// This file is auto-generated by @hey-api/openapi-ts

export const LoginDtoSchema = {
  type: 'object',
  properties: {
    email: {
      type: 'string',
    },
    password: {
      type: 'string',
    },
  },
  required: ['email', 'password'],
} as const

export const GenderSchema = {
  type: 'string',
  enum: ['MALE', 'FEMALE', 'OTHER'],
} as const

export const UserInfoSchema = {
  type: 'object',
  properties: {
    gender: {
      nullable: true,
      $ref: '#/components/schemas/Gender',
    },
    id: {
      type: 'string',
    },
    email: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    firstName: {
      type: 'string',
      nullable: true,
    },
    lastName: {
      type: 'string',
      nullable: true,
    },
    verifiedEmail: {
      type: 'boolean',
    },
    memberType: {
      type: 'string',
    },
    birthday: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    avatar: {
      type: 'string',
      nullable: true,
    },
    bio: {
      type: 'string',
      nullable: true,
    },
    phoneNumber: {
      type: 'string',
      nullable: true,
    },
    country: {
      type: 'string',
      nullable: true,
    },
    city: {
      type: 'string',
      nullable: true,
    },
    district: {
      type: 'string',
      nullable: true,
    },
    address: {
      type: 'string',
      nullable: true,
    },
    postalCode: {
      type: 'string',
      nullable: true,
    },
    status: {
      type: 'string',
    },
    metadata: {
      type: 'object',
      nullable: true,
    },
  },
  required: [
    'gender',
    'id',
    'email',
    'name',
    'firstName',
    'lastName',
    'verifiedEmail',
    'memberType',
    'birthday',
    'avatar',
    'bio',
    'phoneNumber',
    'country',
    'city',
    'district',
    'address',
    'postalCode',
    'status',
    'metadata',
  ],
} as const

export const LoginResponseSchema = {
  type: 'object',
  properties: {
    accessToken: {
      type: 'string',
    },
    refreshToken: {
      type: 'string',
    },
    user: {
      $ref: '#/components/schemas/UserInfo',
    },
  },
  required: ['accessToken', 'refreshToken', 'user'],
} as const

export const CacheTypeSchema = {
  type: 'string',
  enum: [
    'default',
    'force-cache',
    'no-cache',
    'no-store',
    'only-if-cached',
    'reload',
  ],
  description: 'Cache type',
} as const

export const NextJsOptionsSchema = {
  type: 'object',
  properties: {
    revalidate: {
      type: 'number',
      description: 'Revalidate time in seconds',
    },
    type: {
      $ref: '#/components/schemas/CacheType',
    },
    tags: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: 'Cache tags',
    },
  },
} as const
